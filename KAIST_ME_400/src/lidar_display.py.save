#!/usr/bin/env python
from __future__ import print_function
import roslib
import sys
import rospy
import cv2
import numpy as np
import math
import time

from sensor_msgs.msg import LaserScan
from std_msgs.msg import String
from std_msgs.msg import Int32
from std_msgs.msg import Float32

## image size setting
x_size = 1080
y_size = 720 

### the origin of the angle is center of the robot front
start_x_angle  = 0
end_x_angle = 60

start_x_angle = 0
end_y_angle = 60

#################
standard_x = x_size/2
standard_y = y_size/2

## color configure
white = (255,255,255)
red = (0,0,255)
green = (0,255,0)
blue = (255,0,0)
starnge = (102,58,255)

## other parameters

## list of the x,y angle
x_y_coordinate = {}
start_angle_l = 0
end_angle_l = 270

start_angle_r = 540
end_angle_r = 660

direction = 0

steerKp = 1.8
steerKd = 0

steerPreviousError = 0
steerPreviousTime = 0

lidarPreviousError = 0 #distance difference error of last time callback updated error
lidarPreviousTime = time.time() #last time that callback updated time
lidarKp = 0
lidarKd = 0

previousFrontDist = 0 # distance from front wall last time callback updated it
previousSpeedError = 0 #speed last time it was updated
thrustKp = 0.5
thrustKd = 0

targetAngle = 0
previousTargetAngle = 0

previousTime = 0
prev_fr_dist = 0

rear_motor = 0
servo_angle = 90

class core_processing:

    def __init__(self):

        self.image_sub = rospy.Subscriber("scan",LaserScan,self.callback) #original image subscriber
        self.imu_sub = rospy.Subscriber("yaw_data",Float32,self.callback2)
        self.loop_sub = rospy.Subscriber("loop_gen",Int32,self.callback3)        

        self.front = rospy.Publisher('front_motor',Int32,queue_size=10)
        self.rear = rospy.Publisher('rear_motor',Int32,queue_size=10)
        self.servo = rospy.Publisher('servo_motor',Int32,queue_size=10)


    def cal_draw_location(self,angle,range):

        global x_y_coordinate
        global start_x
        global start_y
        global end_x
        global end_y

        theta = angle*(math.pi/573) 
        #theta = angle*(math.pi/360) in old lidar
        x = -(math.sin(theta) *range)
        y = math.cos(theta) *range
        try:
            x = int(x*100)
        except :
            x = 0
        
        try:
            y = int(y*100)
        except:
            y = 0
        #print(x,y)
        #self.draw_lidar_point(img,x,y,1,white)
 
        ##save the x,y coordinate
        
        x_y_coordinate[str(angle)] = [x,y]

        if(angle == 40):
            pass

        return x,y

    def draw_lidar_point(self,img,x,y,point_size,color):
        ## draw lidar point
        cv2.circle(img,(x+standard_x,-y+standard_y),point_size,color,-1)

    def draw_line(self,img,point1,point2):

        ## transform the point to the normal X_Y coordinate
        a1 = point1[0]+standard_x
        b1 = -point1[1]+standard_y
        a2 = point2[0]+standard_x
        b2 = -point2[1]+standard_y

        ## draw the line
        cv2.line(img,(a1,b1),(a2,b2),red,2)

    
    def cal_dist(self,x1, y1, x2, y2, a, b):
        # calculate the disstance between point and line
        # (x1,y1) and (x2,y2) make the line , (a,b) is the point

        area = abs((x1-a) * (y2-b) - (y1-b) * (x2 - a))
        AB = ((x1-x2)**2 + (y1-y2)**2) **0.5
        try:
            distance = area/AB
        except:
            distance = 0
        return distance

    def make_point_and_line(self,data,start_angle,end_angle,lr): #Draw the left line



        #global start_angle
        #global end_angle
        global x_y_coordinate
        global start_x
        global start_y
        global end_x
        global end_y

        ##initialize all data
        x_y_coordinate = {}
        start_x = 0 
        start_y = 0
        end_x = 0
        end_y = 0
        max_dist = 0
        max_index = 0
        max_thres_dist = 0
        fr_dist = 0
        cornerNum = 0

        for i in range(len(data.ranges)):
            ranges = data.ranges[i]
            self.cal_draw_location(i,ranges)
        
        
        

        fr_x1 = x_y_coordinate[str(4)][0]
        fr_y1 = x_y_coordinate[str(4)][1]
        fr_x2 = x_y_coordinate[str(1146-4)][0]
        fr_y2 = x_y_coordinate[str(1146-4)][1]


        #draw front start and end points
        #self.draw_lidar_point(black_img,fr_x1,fr_y1,3,blue)
        #self.draw_lidar_point(black_img,fr_x2,fr_y2,3,blue)

        fr_line_center_x = (fr_x1 + fr_x2)/2
        fr_line_center_y = (fr_y1 + fr_y2)/2
        fr_dist = math.sqrt(fr_line_center_x**2 + fr_line_center_y**2) #calculate distance to front line
        #print(fr_dist)


        
        #here we put code to find out discontinuites and abandon discontinued lines
        #we calculate the distance of every point from the point before and if it exceeds a certain threshold we abandon every point after it
        
        if(end_angle == 270):
            angle = end_angle
            dist = 0
            prev_x = x_y_coordinate[str(end_angle)][0]
            prev_y = x_y_coordinate[str(end_angle)][1]
            while(dist < 50 and angle >= 4):
                a = x_y_coordinate[str(angle)][0]
                b = x_y_coordinate[str(angle)][1] 
                dist = math.sqrt((a-prev_x)**2 + (b-prev_y)**2)
                if(dist >= 50):
                    start_angle = angle + 1
                angle -= 1
                prev_x = a
                prev_y = b
        
        if(start_angle == 1146-270):
            angle = start_angle
            dist = 0
            prev_x = x_y_coordinate[str(start_angle)][0]
            prev_y = x_y_coordinate[str(start_angle)][1]
            while(dist < 50 and angle <= 1146-4):
                a = x_y_coordinate[str(angle)][0]
                b = x_y_coordinate[str(angle)][1] 
                dist = math.sqrt((a-prev_x)**2 + (b-prev_y)**2)
                if(dist >= 50):
                    end_angle = angle - 1
                angle += 1
                prev_x = a
                prev_y = b
        
        x1 = x_y_coordinate[str(start_angle)][0]
        y1 = x_y_coordinate[str(start_angle)][1]
        ## check not the origin
        x1 = x_y_coordinate[str(start_angle+1)][0]
        y1 = x_y_coordinate[str(start_angle+1)][1]



        x2 = x_y_coordinate[str(end_angle-1)][0]
        y2 = x_y_coordinate[str(end_angle-1)][1]

        #self.draw_lidar_point(black_img,x1,y1,5,white) #Make point to the start
        #self.draw_lidar_point(black_img,x2,y2,5,green) #Make point to the end

        for j in range(start_angle,end_angle): #Get a point to draw a corner
            a = x_y_coordinate[str(j)][0]
            b = x_y_coordinate[str(j)][1] 
            dist = self.cal_dist(x1,y1,x2,y2,a,b)
            thres_dist = (a*a+b*b)
            if(dist > max_dist and a != 0 and thres_dist > max_thres_dist and dist < 120):
                max_thres_dist = thres_dist
                max_dist = dist
                max_index = j

        


        #define the point fo the target
        x3 = x_y_coordinate[str(max_index)][0]
        y3 = x_y_coordinate[str(max_index)][1]
        
        
        if(max_dist>5):
            cornerNum = 1
            #draw point and line
            #self.draw_lidar_point(black_img,x3,y3,5,starnge)
            #self.draw_line(black_img,x_y_coordinate[str(start_angle)],x_y_coordinate[str(max_index)])
            #self.draw_line(black_img,x_y_coordinate[str(max_index)],x_y_coordinate[str(end_angle-1)])
            if(lr == 'right'):
                line_dist = self.cal_dist(x1,y1,x_y_coordinate[str(max_index)][0],x_y_coordinate[str(max_index)][1],0,0)
            if(lr == 'left'):
                line_dist = self.cal_dist(x_y_coordinate[str(max_index)][0],x_y_coordinate[str(max_index)][1],x2,y2,0,0)
        
        else:
            cornerNum = 0
            #self.draw_line(black_img,x_y_coordinate[str(start_angle)],x_y_coordinate[str(end_angle-1)])
            line_dist = self.cal_dist(x1,y1,x2,y2,0,0)
        
        #self.draw_line(black_img,x_y_coordinate[str(4)],x_y_coordinate[str(1146-4)])
        return_dict = {}
        return_dict['cornerNum'] = cornerNum
        return_dict['fr_dist'] = fr_dist
        return_dict['line_dist'] = line_dist
        if(lr == 'left'):
            return_dict['points_1'] = (x1,y1)
            return_dict['points_2'] = (x2,y2)
            return_dict['points_3'] = (x3,y3)
        elif(lr = 'right'):
	    
        return return_dict 




    def call return_dict['points_1'] = (x1,y1)
            return_dict['points_2'] = (x2,y2)
            return_dict['points_3'] = (x3,y3)back(self,data):

        global direction
        global steerPreviousError
        global lidarPreviousTime
        global previousFrontDist
        global previousSpeedError
        global targetAngle
        global previousTargetAngle

        global previousTime
        global prev_fr_dist

        global rear_motor
        global servo_angle

        #black_img = np.zeros(shape=[y_size,x_size,3],dtype=np.uint8)

        # the 0-360 scale is 0-1146
        start = time.time()
        leftData = self.make_point_and_line(data,4,270,'left') #This value must be clock wise -> draw left line
        rightData = self.make_point_and_line(data,1146-270,1146-4,'right')  #This value must be clock wise -> draw right line
        fr_dist = (leftData['fr_dist'] + rightData['fr_dist']) / 2
        totalCornerNum = leftData['cornerNum'] + rightData['cornerNum']
        #print("front distance: " + str(fr_dist) + " leftcorners: " + str(leftData['cornerNum']) + " rightcorners: " + str(rightData['cornerNum']))
        
        left = [leftData['point_1'],leftData['point_2'],leftData['point_3']]
        right = [rightData['point_1'],rightData['point_2'],rightData['point_3']] 

        #cv2.imshow("black",black_img)
        #cv2.waitKey(1)
        #print(time.time()-start)
        
        
        #check if front distance is far enough
        if(fr_dist>100):
            #drive straight
            dist_diff = rightData['line_dist']-leftData['line_dist']
            if(abs(dist_diff)>60):
                targetAngle = previousTargetAngle + lidarKp * dist_diff
            else:
                targetAngle = previousTargetAngle
        
        
        #if the hovercraft is too close to the front wall then turn
        else:
            rear_motor = 100
            #if both walls have an inward facing corner it is a dead end
            if(totalCornerNum >= 2):
                #turn around 180 degrees
                
                targetAngle = previousTargetAngle + 180
                #if there is only one corner it is a curved section
            else:
                if(leftData['cornerNum'] == 1):
                    #turn 90 degrees to the right
                    targetAngle = previousTargetAngle + 90
                if(rightData['cornerNum'] == 1):
                    #turn 90 degrees to the left
                    targetAngle = previousTargetangle - 90
        
        if(targetAngle>180):
            targetAngle = targetAngle-360
        if(targetAngle<180):
            targetAngle = targetAngle+360
        previousTargetAngle = targetAngle
        previousTime = time.time()
        prev_fr_dist = fr_dist
        ######
        #print("rear_motor: " + str(rear_motor) + "  " + "servo_angle: " + str(servo_angle))

        front_motor = 0
        rear_motor = 0
        servo_angle = newMap(steerPidControl(targetAngle, direction, steerPreviousError),-90,90,180,0)

        
        
        ####

        ###publish the command
        self.rear.publish(rear_motor)
        self.front.publish(front_motor)
        self.servo.publish(servo_angle)
    

    def callback2(self,data):
        global direction
        direction = data.data
        #print("direction: " + str(direction))
        pass
    
    def callback3(self,data):
        
        #main loop of the robot
        pass

def newMap(value,fromMin,fromMax,toMin,toMax):
    return (value-fromMin) / (fromMax - fromMin) * (toMax - toMin) + toMin
    
def steerPidControl(setpoint, currentValue, steerPreviousError):
    global steerPreviousTime
    timeNow = time.time()
    error = setpoint - currentValue
    control = steerKp * error + steerKd * (error-steerPreviousError) / (timeNow - steerPreviousTime)
    if(control < -90): control = -90
    if(control > 90): control = 90
    steerPreviousTime = timeNow
    steerPreviousError = error
    control = int(control)
    return control

def main(args):
    cp = core_processing()
    rospy.init_node('core', anonymous=True)
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    cv2.destroyAllWindows()
   
if __name__ == '__main__':
    main(sys.argv)


#### system brief

# ros_sub(in the init function ) -> callback(left,right,display)
